---

- set_fact:
    systemd_network_dir: /etc/systemd/network

- name: "remove a static route on srs host for {{ core.upf.ip_prefix }} via {{ core.amf.ip }}"
  shell: |
    ip route del {{ core.upf.ip_prefix }} via {{ core.amf.ip }}
  when: (inventory_hostname in groups['srs_nodes'][0]) and (inventory_hostname not in groups['master_nodes'])
  become: true
  ignore_errors: yes

- name: "remove a static route on core host for {{ srs.docker.network.subnet }} via {{ hostvars[item]['ansible_default_ipv4']['address'] }}"
  shell: |
    ip route del {{ srs.docker.network.subnet }} via {{  hostvars[item]['ansible_default_ipv4']['address'] }}
  with_items: "{{ play_hosts | intersect(groups['srs_nodes'][0]) | difference(groups['master_nodes']) }}"
  when: (inventory_hostname in groups['master_nodes'])
  become: true
  ignore_errors: yes

- name: "remove iptable rule: forward from {{ srs.docker.network.bridge.name }} to access"
  iptables:
    chain: FORWARD
    in_interface: "{{ core.upf.iface }}"
    out_interface: "{{ srs.docker.network.bridge.name }}"
    jump: ACCEPT
    state: absent
  when: (inventory_hostname in groups['srs_nodes'][0]) and (inventory_hostname in groups['master_nodes'])
  become: true
  ignore_errors: yes

- name: "remove iptable rule: forward from {{ srs.docker.network.bridge.name }} to access"
  iptables:
    chain: FORWARD
    in_interface: "{{ srs.docker.network.bridge.name }}"
    out_interface: "{{ core.upf.iface }}"
    jump: ACCEPT
    state: absent
  when: (inventory_hostname in groups['srs_nodes'][0]) and (inventory_hostname in groups['master_nodes'])
  become: true
  ignore_errors: yes

- name: "remove iptable rule: forward from {{ srs.docker.network.data_iface }} to {{ srs.docker.network.bridge.name }} "
  iptables:
    chain: FORWARD
    in_interface: "{{ srs.docker.network.data_iface }}"
    out_interface: "{{ srs.docker.network.bridge.name }}"
    jump: ACCEPT
    state: absent
  when: inventory_hostname in groups['srs_nodes'][0]
  become: true

- name: "delete iptable rule: forward from {{ srs.docker.network.bridge.name }} to {{ srs.docker.network.data_iface }}"
  iptables:
    chain: FORWARD
    in_interface: "{{ srs.docker.network.bridge.name }}"
    out_interface: "{{ srs.docker.network.data_iface }}"
    jump: ACCEPT
    state: absent
  when: inventory_hostname in groups['srs_nodes'][0]
  become: true

- name: delete {{ srs.docker.network.name }} network
  community.docker.docker_network:
    name: "{{ srs.docker.network.name }}"
    state: absent
    force: yes
  when: inventory_hostname in groups['srs_nodes'][0]
  become: true

- name: set net.ipv4.conf.all.arp_filter to 0
  ansible.posix.sysctl:
    name: net.ipv4.conf.all.arp_filter
    value: '0'
    sysctl_set: true
    reload: true
  when: (inventory_hostname in groups['srs_nodes'][0]) and (inventory_hostname not in groups['master_nodes'])
  become: true

- name: set net.ipv4.conf.all.arp_ignore to 0
  ansible.posix.sysctl:
    name: net.ipv4.conf.all.arp_ignore
    value: '0'
    sysctl_set: true
    reload: true
  when: (inventory_hostname in groups['srs_nodes'][0]) and (inventory_hostname not in groups['master_nodes'])
  become: true

- name: set net.ipv4.conf.all.arp_announce to 0
  ansible.posix.sysctl:
    name: net.ipv4.conf.all.arp_announce
    value: '0'
    sysctl_set: true
    reload: true
  when: (inventory_hostname in groups['srs_nodes'][0]) and (inventory_hostname not in groups['master_nodes'])
  become: true

- name: set net.ipv4.conf.all.rp_filter to 2
  ansible.posix.sysctl:
    name: net.ipv4.conf.all.rp_filter
    value: '2'
    sysctl_set: true
    reload: true
  when: (inventory_hostname in groups['srs_nodes'][0]) and (inventory_hostname not in groups['master_nodes'])
  become: true

- name: force systemd to reread configs
  systemd:
    daemon_reload: true
  when: inventory_hostname in groups['srs_nodes'][0]
  become: true

- name: restart systemd-networkd
  systemd:
    name: systemd-networkd
    state: restarted
  when: inventory_hostname in groups['srs_nodes'][0]
  become: true
